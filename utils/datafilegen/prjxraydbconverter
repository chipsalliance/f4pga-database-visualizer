#!/usr/bin/env python3

import argparse
from datafile import *
import json
import yaml
import sys
import re
from datetime import datetime
import os
from pathlib import Path
import shutil


class PrjxrayDbConverter:
    def __init__(self, src):
        # Using abspath to avoid symlink resolving
        self.src = Path(os.path.abspath(src))
        self.src_oneup = self.src.parents[0]
        print(src)

        #Read parts.yaml file and get path
        with open(self.src.parent/"mapping/parts.yaml", 'r') as f:  
            data = yaml.safe_load(f)
            if self.src.name in data:
                device = data.get(self.src.name).get("device")
            else:
                device = self.src.name
        #Read devices yaml and find fabric id
        with open(self.src.parent/"mapping/devices.yaml", 'r') as f:  
            data = yaml.safe_load(f)
            fabric = data.get(device).get("fabric")    
        self.src = self.src.parent.joinpath(fabric)
        if self.src.is_file():
            self.src = self.src.parent
        self.data_file = SdbvDataFile()


    @staticmethod
    def _get_part_info_from_path(path):
        # Path example: prjxray-db/artix7/xc7a100tcsg324-1
        part = path.name
        family = path.parent.name
        return (part, family)


    def _process_tilegrid(self):
        obj = None
        with open(self.src/"tilegrid.json", "r") as file:
            obj = json.load(file)

        self.data_file.setBuildDate(datetime.now())

        # Grid-related properties
        col_headers = None
        row_headers = None
        cols_range = [None, None]
        rows_range = [None, None]

        def update_range(range, value):
            if range[0] is None or value < range[0]:
                range[0] = value
            if range[1] is None or value > range[1]:
                range[1] = value

        grid = SdbvGrid()
        grid.cells.fieldOrder = ["col", "row", "fullName", "type", "description"]
        grid.cells.templateConsts = {
            "COLORS": {}
        }
        grid.cells.fieldTemplates = {
            "color": r"{get(COLORS, type)}",
            # \u00a0 = non-breaking space
            "name": r"{replace(fullName, 'INTERFACE_','IFACE_', '_(.)_','\u00a0$1_', '^(.)_','$1\u00a0', '_',' ')}"
        }

        # Coloring rules from https://github.com/f4pga/prjxray/tree/master/htmlgen
        color_map = [
            (r"NULL|.*BRK.*", None),
            (r".*IO.*", Colors.LIGHT_GRAY),
            (r"INT_INTERFACE_[LR]|DSP_[LR]", Colors.PURPLE),
            (r"BRAM_INT_INTERFACE_[LR]|BRAM_[LR]", Colors.CYAN),
            (r"HCLK_[LR]", Colors.LIGHT_GREEN),
            (r".*CLK.*", Colors.GREEN),
            (r".*CMT.*", Colors.DARK_GREEN),
            (r"CLBLM_[LR]", Colors.RED),
            (r"CLBLL_[LR]", Colors.YELLOW),
            (r"INT_L|INT_R", Colors.LIGHT_BLUE),
            (r".*INT_FEEDTHRU.*", Colors.BLUE),
            (r".*", Colors.GRAY)
        ]
        color_map = [(re.compile(pat), color) for pat,color in color_map]

        def lookup_color(cellType):
            for (pat, color) in color_map:
                if pat.fullmatch(cellType):
                    return color
            return None

        for name, entries in obj.items():
            col = entries["grid_x"]
            row = entries["grid_y"]
            typ = entries["type"]

            description = [
                {"Grid position": f"({col}, {row})"},
            ]
            clock_region = entries.get("clock_region", None)
            if clock_region:
                description.append({"Clock region": clock_region})

            sites = entries.get("sites", {})
            sitearray =[]
            if len(sites) > 0:
                description.append("# Sites")
                for site_name, site_type in sites.items():
                    description.append({site_name: site_type})
                    obj1 = None
                    sitestr = "site_type_"+str(site_type)+'.json'
                    
                    sitesrc = str(self.src_oneup)+'/'+sitestr
                    if site_type in sitearray:
                        break
                    else:
                        shutil.copy2(sitesrc,'/Users/gsm/Documents/GitHub/f4pga-database-visualizer/dist/production/')
                        sitearray.append(site_type)
                    




            pin_functions = entries.get("pin_functions", {})
            if len(pin_functions) > 0:
                description.append("# Pin functions")
                for pf_name, pf_type in pin_functions.items():
                    description.append({pf_name: pf_type})

            cell = {
                "fullName": name,
                "col": entries["grid_x"],
                "row": entries["grid_y"],
                "type": entries["type"],
                "description": description
            }
            update_range(cols_range, col)
            update_range(rows_range, row)

            if entries["type"] not in grid.cells.templateConsts["COLORS"]:
                grid.cells.templateConsts["COLORS"][entries["type"]] = lookup_color(entries["type"])

            grid.cells.addCell(cell)

        grid.colsRange = cols_range
        grid.rowsRange = rows_range

        self.data_file.grids[""] = grid


    def convert(self):
        self.data_file = SdbvDataFile()

        (part, family) = PrjxrayDbConverter._get_part_info_from_path(self.src)
        self.data_file.name = f"{family} ({part})"

        self._process_tilegrid()

        return self.data_file


def fs_friendly_name(name, already_used_names=[]):
    safe_name = re.sub("[^a-zA-Z0-9_-]", "_", name)
    if safe_name in already_used_names:
        match = re.fullmatch("(.*?)(?:_([1-9][0-9]*))?", safe_name)
        assert(match is not None)
        base = match.group(1)
        number = match.group(2)
        number = int(number) if number is not None else 0
        while safe_name in already_used_names:
            number += 1
            safe_name = f"{base}_{number}"
    return safe_name


def run(src, out, readable_output=False):
    converter = PrjxrayDbConverter(src)
    data_file = converter.convert()

    base_name = out.stem
    ext = out.suffix
    used_grid_names = set()
    for name, grid in data_file.grids.items():
        if name != "":
            fs_name = fs_friendly_name(name, used_grid_names)
            used_grid_names.add(fs_name)
            grid_file_name = f"{base_name}.{fs_name}.data{ext}"
        else:
            grid_file_name = f"{base_name}.data{ext}"
        grid.cells.data = SdbvImport(grid_file_name, grid.cells.data)

    out.parent.mkdir(parents=True, exist_ok=True)
    return data_file.writeFiles(out.name, out.parent, minimalOutput=(not readable_output))


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--readable-output", action="store_true", help="Use line breaks and indents in output JSON files.")
    parser.add_argument("src", type=Path, help="Path to a source file or a directory with source files.")
    parser.add_argument("out", type=Path, help="Output data file path.")

    args = parser.parse_args()
    files = run(args.src, args.out, readable_output=args.readable_output)

    for file in files:
        print(file)


if __name__ == "__main__":
    main()
